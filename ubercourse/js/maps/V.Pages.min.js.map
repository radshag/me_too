{"version":3,"sources":["V.Pages.js"],"names":["initPages","V","console","error","Pages","load","loadPages","init","initPage","newPageEvent","CustomEvent","bubbles","cancelable","pages","document","getElementsByClassName","childPages","i","length","page","pageElement","getElementById","HTMLElement","id","element","attributes","propertyName","attributeValue","iMax","name","indexOf","dataToCamelCase","value","childId","j","jMax","parent","children","push","str","arr","slice","split","toUpperCase","join","url","options","newHTML","createElement","xhr","XMLHttpRequest","onPageAdded","onAllPagesAdded","pagesContainer","parentNode","lightboxesContainer","open","onreadystatechange","readyState","status","onLoadError","htmlString","responseText","filterHTML","innerHTML","addedPages","addedLightboxes","lightboxes","lightbox","appendChild","registerPage","dispatchEvent","send","window"],"mappings":"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","file":"../V.Pages.min.js","sourcesContent":["/**\r\n * V.Pages.js\r\n */\r\n;(function initPages(V) {  \r\n  if (!V) {\r\n    console.error('V not defined!');\r\n    return false;\r\n  }\r\n\r\n  V.Pages = {\r\n    load: loadPages,\r\n    init: initPage\r\n  };\r\n\r\n  const newPageEvent = new CustomEvent('newpage', {\r\n    bubbles: true,\r\n    cancelable: true\r\n  });\r\n\r\n  /**\r\n   * Register all pages and child pages in the DOM to the V.Pages object.\r\n   */\r\n  const pages = document.getElementsByClassName('page');\r\n  const childPages = document.getElementsByClassName('child-page');\r\n\r\n  // loop through pages\r\n  for (let i = pages.length; i--;) {\r\n    initPage(pages[i]);\r\n  }\r\n\r\n  /**\r\n   * Loops through the data attributes of an element \r\n   * and adds them to the V.Pages object.\r\n   * \r\n   * @param  {Element} pageElement - The page.\r\n   * @return {object}  V.Pages[id]\r\n   */\r\n  function initPage(page) {\r\n    let pageElement;\r\n\r\n    if (typeof page === 'string') {\r\n      pageElement = document.getElementById(page);\r\n    } else if (page instanceof HTMLElement) {\r\n      pageElement = page;\r\n    }\r\n\r\n    if (!pageElement) {\r\n      debugger;\r\n      console.error('Couldnâ€™t find that page.');\r\n      return false;\r\n    }\r\n\r\n    const id = pageElement.id;\r\n\r\n    if (!id) {\r\n      console.error('A page is missing an id.');\r\n      return false;\r\n    }\r\n\r\n    // V.Pages[id] must exist\r\n    if (!V.Pages[id]) {\r\n      V.Pages[id] = {};\r\n    }\r\n\r\n    V.Pages[id].element = pageElement;\r\n\r\n    const attributes = pageElement.attributes; \r\n    let propertyName;\r\n    let attributeValue;\r\n\r\n    for (let i = 0, iMax = attributes.length; i < iMax; i++) {\r\n      if (attributes[i].name.indexOf('data-') === 0) {\r\n        propertyName = dataToCamelCase(attributes[i].name);\r\n        V.Pages[id][propertyName] = attributes[i].value;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Register the page's child pages.\r\n     */\r\n    const childPages = pageElement.getElementsByClassName('child-page');\r\n    let childId;\r\n\r\n    for (let j = 0, jMax = childPages.length; j < jMax; j++) {\r\n      initPage(childPages[j]);\r\n      childId = childPages[j].id;\r\n      V.Pages[childId].parent = id;\r\n      V.Pages[id].children = V.Pages[id].children || [];\r\n      V.Pages[id].children.push(childId);\r\n    }\r\n\r\n    /**\r\n     * Converts a string from 'data-hello-world' to 'helloWorld'\r\n     */\r\n    function dataToCamelCase(str) {\r\n      // ['hello', 'world']\r\n      const arr = str.slice(5).split('-');\r\n\r\n      // loop i from (arr.length - 1) to 1\r\n      let i = arr.length;\r\n      \r\n      // ['hello', 'World']\r\n      while (--i) {\r\n        arr[i] = arr[i][0].toUpperCase() + arr[i].slice(1);\r\n      }\r\n\r\n      // helloWorld\r\n      return arr.join('');\r\n    }\r\n\r\n    return V.Pages[id];\r\n  }\r\n\r\n  /**\r\n   * Loads HTML from a URL or array of URLs via XMLHttpRequest, \r\n   * appends each `.page` and `lightbox` in the response to DOM,\r\n   * and registers the new page to `V.Pages`. \r\n   *\r\n   * Options: The optional `options` object can contain callback functions \r\n   *   `onPageAdded` and `onAllPagesAdded`. \r\n   *   \r\n   *   `onPageAdded` is called after each page is added to the DOM, \r\n   *   with the page element as context and parameters `i` and `iMax`. \r\n   *   \r\n   *   `onAllPagesAdded` is called after the last page is added, with an \r\n   *   array of all the page elements as context.\r\n   * \r\n   * @param  {string}  url      - URL(s) to load\r\n   * @param  {object}  options  - object containing callbacks\r\n   */\r\n  function loadPages(url, options) {\r\n    options = options || {};\r\n\r\n    const newHTML = document.createElement('div');\r\n    const xhr = new XMLHttpRequest();\r\n    const onPageAdded = options.onPageAdded || function () {};\r\n    const onAllPagesAdded = options.onAllPagesAdded || function () {};    \r\n\r\n    // these could be closured, but sometimes the DOM is reset, so get them every time\r\n    const pagesContainer = document.getElementsByClassName('page')[0].parentNode;\r\n    const lightboxesContainer = document.getElementsByClassName('lightboxes')[0];\r\n\r\n    xhr.open('GET', url, true);\r\n\r\n    xhr.onreadystatechange = function() {\r\n      if (this.readyState !== 4) {\r\n        return false;\r\n      }\r\n\r\n      if (this.status !== 200) {\r\n        if (typeof V.Pages.onLoadError === 'function') {\r\n          V.Pages.onLoadError();\r\n        }\r\n\r\n        return false;\r\n      }\r\n\r\n      htmlString = this.responseText;\r\n\r\n      if (options.filterHTML) {\r\n        htmlString = options.filterHTML(htmlString);\r\n      }\r\n\r\n      newHTML.innerHTML = htmlString;\r\n\r\n      const addedPages = [];\r\n      const addedLightboxes = [];\r\n      const pages = newHTML.getElementsByClassName('page');\r\n      const lightboxes = newHTML.getElementsByClassName('lightbox');\r\n      \r\n      // add lightboxes to DOM\r\n      for (let i = 0, iMax = lightboxes.length; i < iMax; i++) {\r\n        // `lightboxes[0]` for each `i` because `appendChild` removes it\r\n        const lightbox = lightboxesContainer.appendChild(lightboxes[0]);\r\n        addedLightboxes.push(lightbox);\r\n      }\r\n\r\n      // add pages to DOM with callbacks\r\n      for (let i = 0, iMax = pages.length; i < iMax; i++) {\r\n        // `page[0]` for each `i` because `appendChild` removes it\r\n        const page = pagesContainer.appendChild(pages[0]);\r\n        addedPages.push(page);\r\n        registerPage(page);\r\n        onPageAdded(page, i, iMax);\r\n        page.dispatchEvent(newPageEvent);\r\n      }\r\n\r\n      // callback for all content\r\n      onAllPagesAdded(addedPages, addedLightboxes);\r\n    };\r\n\r\n    xhr.send();\r\n  }\r\n})(window.V);\r\n"]}